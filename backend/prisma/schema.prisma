generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  fullName         String
  avatar           String?
  phone            String?
  role             Role              @default(USER)
  isVerified       Boolean           @default(false)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bookings         Booking[]
  facilities       Facility[]
  otpVerifications OtpVerification[]
  reviews          Review[]

  @@map("users")
}

model OtpVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_verifications")
}

model Facility {
  id          String         @id @default(cuid())
  name        String
  description String
  address     String
  location    String
  venueType   VenueType
  ownerId     String
  status      FacilityStatus @default(PENDING)
  images      String[]
  amenities   String[]
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bookings    Booking[]
  courts      Court[]
  owner       User           @relation(fields: [ownerId], references: [id])
  reviews     Review[]

  @@map("facilities")
}

model Court {
  id           String     @id @default(cuid())
  name         String
  sportType    SportType
  pricePerHour Float
  images       String[]
  facilityId   String
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  facility     Facility   @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  timeSlots    TimeSlot[]

  @@map("courts")
}

model TimeSlot {
  id        String   @id @default(cuid())
  courtId   String
  startTime String
  endTime   String
  date      DateTime
  isBooked  Boolean  @default(false)
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@unique([courtId, date, startTime, endTime])
  @@map("time_slots")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  facilityId      String
  courtId         String
  bookingDate     DateTime
  startTime       String
  endTime         String
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  paymentId       String?
  razorpayOrderId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  court           Court         @relation(fields: [courtId], references: [id])
  facility        Facility      @relation(fields: [facilityId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  facilityId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  facility   Facility @relation(fields: [facilityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, facilityId])
  @@map("reviews")
}

enum Role {
  USER
  FACILITY_OWNER
  ADMIN
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum SportType {
  BADMINTON
  TENNIS
  CRICKET
  FOOTBALL
  BASKETBALL
  TABLE_TENNIS
  SQUASH
  VOLLEYBALL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum FacilityStatus {
  PENDING
  APPROVED
  REJECTED
}
