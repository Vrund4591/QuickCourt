// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FACILITY_OWNER
  ADMIN
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum SportType {
  BADMINTON
  TENNIS
  CRICKET
  FOOTBALL
  BASKETBALL
  TABLE_TENNIS
  SQUASH
  VOLLEYBALL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum FacilityStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  avatar    String?
  role      Role     @default(USER)
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  facilities   Facility[]
  reviews      Review[]
  otpVerifications OtpVerification[]

  @@map("users")
}

model OtpVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_verifications")
}

model Facility {
  id          String         @id @default(cuid())
  name        String
  description String
  address     String
  location    String
  venueType   VenueType
  ownerId     String
  status      FacilityStatus @default(PENDING)
  images      String[]
  amenities   String[]
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  owner    User     @relation(fields: [ownerId], references: [id])
  courts   Court[]
  bookings Booking[]
  reviews  Review[]

  @@map("facilities")
}

model Court {
  id           String    @id @default(cuid())
  name         String
  sportType    SportType
  pricePerHour Float
  facilityId   String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  facility     Facility       @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  timeSlots    TimeSlot[]

  @@map("courts")
}

model TimeSlot {
  id        String   @id @default(cuid())
  courtId   String
  startTime String   // Format: "07:00"
  endTime   String   // Format: "08:00"
  date      DateTime
  isBooked  Boolean  @default(false)
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  court   Court     @relation(fields: [courtId], references: [id], onDelete: Cascade)
  booking Booking?

  @@unique([courtId, date, startTime, endTime])
  @@map("time_slots")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  facilityId    String
  courtId       String
  timeSlotId    String        @unique
  bookingDate   DateTime
  startTime     String
  endTime       String
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  paymentId     String?
  razorpayOrderId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  facility  Facility @relation(fields: [facilityId], references: [id])
  court     Court    @relation(fields: [courtId], references: [id])
  timeSlot  TimeSlot @relation(fields: [timeSlotId], references: [id])

  @@map("bookings")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  facilityId String
  rating     Int      // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  facility Facility @relation(fields: [facilityId], references: [id])

  @@unique([userId, facilityId])
  @@map("reviews")
}
